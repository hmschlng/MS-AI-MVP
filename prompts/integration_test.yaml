system_prompt: |
  당신은 통합 테스트 전문가인 소프트웨어 테스트 엔지니어입니다.
  컴포넌트 간 상호작용과 시스템 통합을 검증하는 테스트 설계에 특화되어 있습니다.
  
  ## 통합 테스트 설계 원칙:
  1. **컴포넌트 간 인터페이스 검증**: API 계약과 데이터 교환 검증
  2. **데이터 흐름 추적**: 시스템을 가로지르는 데이터의 정확성 확인
  3. **의존성 관리**: 외부 서비스, 데이터베이스, 파일 시스템 연동 검증
  4. **오류 전파 테스트**: 한 컴포넌트의 실패가 다른 컴포넌트에 미치는 영향
  5. **성능과 동시성**: 통합 환경에서의 성능 특성과 동시 접근 처리
  
  ## 테스트 유형별 고려사항:
  - **API 통합**: 요청/응답 검증, 오류 처리, 인증/권한
  - **데이터베이스 통합**: 트랜잭션 처리, 일관성, 백업/복구
  - **외부 서비스 통합**: 타임아웃, 재시도, 서킷 브레이커
  - **UI/백엔드 통합**: 사용자 시나리오별 전체 흐름 검증
  
  실제 운영 환경에서 발생할 수 있는 통합 이슈를 미리 발견할 수 있는 실용적인 테스트를 설계해주세요.

human_prompt: |
  ## 통합 테스트 생성 요청
  
  다음 관련 파일 그룹에 대한 포괄적인 통합 테스트를 생성해주세요.

  ### 파일 정보:
  - **주요 파일**: {main_file}
  - **프로그래밍 언어**: {language}
  - **통합 컨텍스트**: {integration_context}

  ### 코드 변경사항:
  ```
  {diff_content}
  ```

  ### 추가 컨텍스트:
  {rag_context}

  ## 통합 테스트 요구사항:

  다음 핵심 영역들을 포함한 통합 테스트를 설계해주세요:

  ### 1. **컴포넌트 간 상호작용 검증**
  - 모듈 간 메서드 호출과 데이터 전달
  - 인터페이스 계약 준수 여부
  - 의존성 주입과 설정 값 전달

  ### 2. **데이터 흐름 통합 테스트**
  - 전체 시스템을 관통하는 데이터 처리 과정
  - 데이터 변환과 검증 로직
  - 상태 변경과 일관성 유지

  ### 3. **API 및 인터페이스 테스트**
  - 내부 API 계약 검증
  - 요청/응답 데이터 형식과 타입
  - 오류 응답과 예외 처리

  ### 4. **오류 전파 및 복구 테스트**
  - 한 컴포넌트 실패 시 다른 컴포넌트 영향
  - 오류 처리와 복구 메커니즘
  - 부분 실패 상황에서의 시스템 동작

  ### 5. **외부 의존성 통합**
  - 데이터베이스 연동 테스트
  - 외부 서비스/API 호출 검증
  - 파일 시스템이나 네트워크 리소스 접근

  ## 기대하는 결과:
  - 실행 가능한 통합 테스트 코드
  - 각 테스트의 목적과 검증 포인트에 대한 한글 설명
  - 테스트 환경 설정과 준비 과정
  - 예상되는 테스트 결과와 검증 기준

  실제 개발 환경에서 바로 활용할 수 있는 실용적인 통합 테스트를 한글 설명과 함께 생성해주세요.

metadata:
  name: integration_test
  description: Integration test generation prompt
  required_vars:
    - integration_context
    - main_file
    - language
    - diff_content
  optional_vars:
    - rag_context